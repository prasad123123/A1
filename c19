#include<iostream>
#include<string>
using namespace std;

class list;
class node
{
int prn;
string name;
node *next;
public:
node(int x,string nm)
{
prn=x;
next=NULL;
name=nm;
}
friend class list;
};
class list
{
node *start;
public:
list(){
start=NULL;
}
void create();
void display();
void insertAtBeginning();
void insertAtEnd();
void insertAfter();
void deleteAtFirst();
void deleteByValue();
void deleteAtEnd();
int computeTotal();
void concatList(list &q1);
};
void list::create()
{
int no;
string nam;
if(start==NULL)
{
cout<<"\nEnter PRN Number: ";
cin>>no;
cout<<"Enter Name: ";
cin>>nam;
start=new node(no,nam);
cout<<"\n\n====== LIST CREATED ======";
}
else
{
cout<<"\nList is already created!!.";
}
}
void list::display()
{
node *t;
t=start;
if(start==NULL)
	cout<<"\nList is Empty";
else
{ 
cout<<"\n====== List: ======\n";
while(t!=NULL){
	cout<<t->prn<<"  "<<t->name<<" \n";
	t=t->next;
	}
}
}
void list::insertAtBeginning()
{
 int no;
 string nam;
 node *temp;
 if(start==NULL)
 {
	create();
 }
 else
 {
 cout<<"\nEnter PRN Number: ";
 cin>>no;
 cout<<"Enter Name: ";
 cin>>nam;
 temp=new node(no,nam);
 temp->next=start;
 start=temp;;
 cout<<"Inserted "<<temp->name<<" at the Beginning.";
 }
}
void list::insertAtEnd()
{
int no;
string nam;
node *t;
if(start==NULL)
	create();
else
{
 cout<<"\nEnter PRN Number: ";
 cin>>no;
 cout<<"Enter Name: ";
 cin>>nam;
 t=start;
 while(t->next!=NULL)
 	t=t->next;
 	node*p=new node(no,nam);
 	t->next=p;
	}
}
void list::insertAfter()
{
int prev_no;
cout<<"\nEnter PRN No. after Do you want Insert: ";
cin>>prev_no;
node *t;
t=start;
string nam;
int flag=0,no;
while(t!=NULL)
{
if(t->prn==prev_no)
{
flag=1;break;
}
t=t->next;
}
if(flag==1)
{
node *p;
cout<<"\nEnter PRN Number: ";
cin>>no;
cout<<"Enter Name: ";
cin>>nam;
p=new node(no,nam);
p->next=t->next;
t->next=p;
}
else
{
cout<<"\n"<<prev_no<<" is NOT in the List.";
}
}

void list::deleteAtFirst()
{
node *t;
if(start==NULL)
	cout<<"\nClub is EMPTY...";
else
{
t=start;
start=start->next;
t->next=NULL; 
delete t;
cout<<"\nPresident Deleted...";
}
}

void list::deleteByValue()
{
int no,flag=0;
node *t,*prev;
if(start==NULL)
	 cout<<"\nList/Club is EMPTY;";
else
{
cout<<"\nEnter PRN no. of Member to be Deleted: ";
cin>>no;
t=start->next;
while(t->next!=NULL)
{
if(t->prn==no){
flag=1;
break;
}
prev=t;
t=t->next;
}
if(flag==1)
{
prev->next=t->next;
t->next=NULL;
delete t;
cout<<"\nMember with PRN No: "<<no<<" is Deleted.";
}
else
cout<<"\nMember NOT FOUND in List./President or Secretary cannot be Deleted.";
}
}
void list::deleteAtEnd()
{
node *t,*prev;
t=start;
if(start==NULL)
cout<<"\nClub is EMPTY...";
else
{
while(t->next!=NULL)
{
prev=t;
t=t->next;
}
prev->next=NULL;
delete t;
cout<<"\nSecretary Deleted...";
}
}
int list::computeTotal()
{
node *t;
int count=0;
t=start;
if(start==NULL)
{
cout<<"\nList is EMPTY.";
return 0;
}
while(t!=NULL)
{
count++;
t=t->next;
}

return count;
}
void list::concatList(list &q1)
{
node *t,*p;
t=q1.start;
if(t==NULL)
{
cout<<"\nList 2 is EMPTY";
return;
}
p=start; 
while(p->next!=NULL)
{
p=p->next;
}
p->next=t;
q1.start=NULL; 
cout<<"\nAfter Concatenation List";
display();
}

int main() 
{
list *l;
int choice,selectList;
list l1,l2;
l=&l1;
X:cout<<"\nSelect The List\n1.List 1\n2.List 2\n\nEnter Your Choice: ";
cin>>selectList;

if(selectList==1)
{
l=&l1;
}
else if(selectList==2)
{
l=&l2;
}
else
{
cout<<"\nWrong List No.";
goto X;
}
do
{
cout<<"\n1.Create List\n2.Insert President\n3.Insert Secretary\n4.Insert After Position(Member)\n5.Display List"
<<"\n6.Delete President\n7.Delete Secretary\n8.Delete Member\n9.Find Total No. of Members\n10.Reselect List ++--##"
<<"\n11.Combine Lists\n0.Exit\nEnter Your Choice:\t";
cin>>choice;

switch(choice)
{
case 1: l->create();
	break;
case 2:	l->insertAtBeginning();
	break;
case 3: l->insertAtEnd();
	break;
case 4: l->insertAfter();
	break;
case 5: l->display();
	break;
case 6: l->deleteAtFirst();
	break;
case 7: l->deleteAtEnd();
	break;
case 8: l->deleteByValue();
	break;
case 9:	cout<<"\nTotal Members(Including President & Secretary): "<<l->computeTotal();
	break;
case 10:
	goto X;
	break;
case 11: l1.concatList(l2);
	break;
deafult:
	 cout<<"Wrong choice entered,TRY AGAIN !!";
}
}while(choice!=0);
cout<<"\n********* GOOD BYE *********\n";

return 0;
}

